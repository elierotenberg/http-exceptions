"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
var HTTPError = require("./HTTPError");

// 4XX Client Errors
var BadRequest = HTTPError.extend(400, "Bad Request", "BadRequest");
var Unauthorized = HTTPError.extend(401, "Unauthorized", "Unauthorized");
var Forbidden = HTTPError.extend(403, "Forbidden", "Forbidden");
var NotFound = HTTPError.extend(404, "Not Found", "NotFound");
var TooManyRequests = HTTPError.extend(429, "Too Many Requests", "TooManyRequests");

// 5XX Server Errors
var InternalServerError = HTTPError.extend(500, "Internal Server Error", "InternalServerError");
var ServiceUnavailable = HTTPError.extend(503, "Service Unavailable", "ServiceUnavailable");

module.exports = {
  HTTPError: HTTPError,

  BadRequest: BadRequest,
  Unauthorized: Unauthorized,
  Forbidden: Forbidden,
  NotFound: NotFound,
  TooManyRequests: TooManyRequests,

  InternalServerError: InternalServerError,
  ServiceUnavailable: ServiceUnavailable };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L2h0dHAtZXhjZXB0aW9ucy9zcmMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xDLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzs7O0FBR3pDLElBQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN0RSxJQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDM0UsSUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQ2xFLElBQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNoRSxJQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDOzs7QUFHdEYsSUFBTSxtQkFBbUIsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQ2xHLElBQU0sa0JBQWtCLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQzs7QUFFOUYsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLFdBQVMsRUFBVCxTQUFTOztBQUVULFlBQVUsRUFBVixVQUFVO0FBQ1YsY0FBWSxFQUFaLFlBQVk7QUFDWixXQUFTLEVBQVQsU0FBUztBQUNULFVBQVEsRUFBUixRQUFRO0FBQ1IsaUJBQWUsRUFBZixlQUFlOztBQUVmLHFCQUFtQixFQUFuQixtQkFBbUI7QUFDbkIsb0JBQWtCLEVBQWxCLGtCQUFrQixFQUNuQixDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgSFRUUEVycm9yID0gcmVxdWlyZSgnLi9IVFRQRXJyb3InKTtcblxuLy8gNFhYIENsaWVudCBFcnJvcnNcbmNvbnN0IEJhZFJlcXVlc3QgPSBIVFRQRXJyb3IuZXh0ZW5kKDQwMCwgJ0JhZCBSZXF1ZXN0JywgJ0JhZFJlcXVlc3QnKTtcbmNvbnN0IFVuYXV0aG9yaXplZCA9IEhUVFBFcnJvci5leHRlbmQoNDAxLCAnVW5hdXRob3JpemVkJywgJ1VuYXV0aG9yaXplZCcpO1xuY29uc3QgRm9yYmlkZGVuID0gSFRUUEVycm9yLmV4dGVuZCg0MDMsICdGb3JiaWRkZW4nLCAnRm9yYmlkZGVuJyk7XG5jb25zdCBOb3RGb3VuZCA9IEhUVFBFcnJvci5leHRlbmQoNDA0LCAnTm90IEZvdW5kJywgJ05vdEZvdW5kJyk7XG5jb25zdCBUb29NYW55UmVxdWVzdHMgPSBIVFRQRXJyb3IuZXh0ZW5kKDQyOSwgJ1RvbyBNYW55IFJlcXVlc3RzJywgJ1Rvb01hbnlSZXF1ZXN0cycpO1xuXG4vLyA1WFggU2VydmVyIEVycm9yc1xuY29uc3QgSW50ZXJuYWxTZXJ2ZXJFcnJvciA9IEhUVFBFcnJvci5leHRlbmQoNTAwLCAnSW50ZXJuYWwgU2VydmVyIEVycm9yJywgJ0ludGVybmFsU2VydmVyRXJyb3InKTtcbmNvbnN0IFNlcnZpY2VVbmF2YWlsYWJsZSA9IEhUVFBFcnJvci5leHRlbmQoNTAzLCAnU2VydmljZSBVbmF2YWlsYWJsZScsICdTZXJ2aWNlVW5hdmFpbGFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEhUVFBFcnJvcixcblxuICBCYWRSZXF1ZXN0LFxuICBVbmF1dGhvcml6ZWQsXG4gIEZvcmJpZGRlbixcbiAgTm90Rm91bmQsXG4gIFRvb01hbnlSZXF1ZXN0cyxcblxuICBJbnRlcm5hbFNlcnZlckVycm9yLFxuICBTZXJ2aWNlVW5hdmFpbGFibGUsXG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9